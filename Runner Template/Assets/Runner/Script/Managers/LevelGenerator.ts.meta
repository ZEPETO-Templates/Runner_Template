fileFormatVersion: 2
guid: 50770cb481467434a9a7d46e8856de97
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: "{\"source\":\"\\\"use strict\\\";\\r\\nObject.defineProperty(exports,
    \\\"__esModule\\\", { value: true });\\r\\nconst __UnityEngine__ = require(\\\"UnityEngine\\\");\\r\\nconst
    UnityEngine_1 = require(\\\"UnityEngine\\\");\\r\\nconst ZEPETO_Script_1 = require(\\\"ZEPETO.Script\\\");\\r\\nconst
    GameManagerRunner_1 = require(\\\"./GameManagerRunner\\\");\\r\\nconst TimerManagerRunner_1
    = require(\\\"./TimerManagerRunner\\\");\\r\\nconst BlockPool_1 = require(\\\"../Block/BlockPool\\\");\\r\\nconst
    MoveBlock_1 = require(\\\"../Block/MoveBlock\\\");\\r\\n// This class is responsible
    for general levels\\r\\nclass LevelGenerator extends ZEPETO_Script_1.ZepetoScriptBehaviour
    {\\r\\n    // Awake is called when the script instance is being loaded\\r\\n   
    Awake() {\\r\\n        // This is how the instance of this class is allocated.
    Which makes it a \\\"singleton\\\"\\r\\n        // https://en.wikipedia.org/wiki/Singleton_pattern\\r\\n       
    if (ZEPETO_Script_1.ZepetoScriptBehaviour.op_Equality(LevelGenerator.Instance,
    null))\\r\\n            LevelGenerator.Instance = this;\\r\\n        else\\r\\n           
    UnityEngine_1.GameObject.Destroy(this);\\r\\n    }\\r\\n    // Update is called
    every frame, if the MonoBehaviour is enabled\\r\\n    Update() {\\r\\n       
    // The elapsed time in seconds since the game started is obtained from the TimeManager\\r\\n       
    // And is used to evaluate if the time limit has been exceeded to increase the
    level of difficulty\\r\\n        let seconds = TimerManagerRunner_1.default.Instance.GetTime();\\r\\n       
    if (seconds > this.difficultyLevelsTimeLimits[this._currentDifficultyLevel])
    {\\r\\n            this._currentDifficultyLevel++;\\r\\n        }\\r\\n    }\\r\\n   
    InitializeLevel() {\\r\\n        // Initialized difficulty level at 0\\r\\n       
    this._currentDifficultyLevel = 0;\\r\\n        // The currently displayed blocks
    are initialized from an empty array\\r\\n        this._currentBlocksShowed =
    [];\\r\\n        // The first block is activated and positioned, the rest are
    requested to their respective pools\\r\\n        this.startBlockPrefab.SetActive(true);\\r\\n       
    this.startBlockPrefab.transform.position = this.startBlockSpawnPoint.transform.position;\\r\\n       
    // The first block is added to the array of currently displayed blocks\\r\\n       
    this._currentBlocksShowed.push(this.startBlockPrefab);\\r\\n        // Then this
    block is assigned as a reference of the last added block\\r\\n        this._lastBlock
    = this.startBlockPrefab;\\r\\n        // Finally, the method responsible for
    generating the first random block is called\\r\\n        this.GenerateBlock();\\r\\n   
    }\\r\\n    // To generate a block, a random block pool is selected and then a
    block is requested\\r\\n    GenerateBlock() {\\r\\n        // This flag is needed
    to check the exit of the loop that is responsible for finding a valid BlockPool\\r\\n       
    let isValidPool = false;\\r\\n        // This variable will contain a random
    number\\r\\n        // In this case, this number represents the randomly obtained
    BlockPool index.\\r\\n        let n = 0;\\r\\n        // We are going to take
    random values \u200B\u200Buntil we find a BlockPool that meets the difficulty
    level allowed at this time.\\r\\n        while (!isValidPool) {\\r\\n           
    // We get a random number between 0 and the number of BlockPools\\r\\n           
    n = Math.floor(UnityEngine_1.Random.Range(0, this.blockPools.length));\\r\\n           
    // We compare if this value is below the current difficulty level\\r\\n           
    if (this.blockPools[n].GetComponent($typeof(BlockPool_1.default)).GetDifficultyLevel()
    <= this._currentDifficultyLevel) {\\r\\n                // If the difficulty
    level is less than or equal to the current difficulty level, \\r\\n               
    // we exit the loop and have now saved the index of that BlockPool\\r\\n               
    isValidPool = true;\\r\\n            }\\r\\n            // If not, we'll go back
    to look for another random index\\r\\n            // DEV NOTE:: \\r\\n           
    // This operation can be optimized in many ways, \\r\\n            // but to
    avoid complicating the understanding of how this class works.\\r\\n           
    // This low-performance mechanic is currently used.\\r\\n        }\\r\\n       
    // Get the position to generate the next block from the last\\r\\n        let
    Pos = this._lastBlock.transform.GetChild(0).transform.position;\\r\\n       
    // With the index corresponding to the BlackPool \\\"n\\\", \\r\\n        //
    we ask the BlockPool of the matrix to generate a block for us \\r\\n        //
    and we pass it as a parameter the position in which it will be located\\r\\n       
    // Finally we save a reference to that new block\\r\\n        let block = this.blockPools[n].GetComponent($typeof(BlockPool_1.default)).getBlock(Pos);\\r\\n       
    // We use the reference of the generated block and assign it internally to the
    last block\\r\\n        // In this way, we can repeat the block generation process
    from the last\\r\\n        this._lastBlock = block;\\r\\n        // Each generated
    block is added to an array for later reset and set in motion\\r\\n        this._currentBlocksShowed.push(block);\\r\\n       
    // We access the \\\"MoveBlock\\\" component and start it up by calling its internal
    method \\\"SetMoving\\\",\\r\\n        // in this case it is defined by the \\\"isGameRunning\\\"
    state maintained by the GameManagerRunner\\r\\n        this._lastBlock.GetComponent($typeof(MoveBlock_1.default)).SetMoving(GameManagerRunner_1.default.Instance.isGameRunning);\\r\\n       
    // Finally we call the method that will define the speed based on the current
    difficulty level\\r\\n        this.SetBlocksSpeed();\\r\\n    }\\r\\n    // This
    method is responsible for adjusting the speed of the generated blocks based on
    the current level of difficulty\\r\\n    SetBlocksSpeed() {\\r\\n        // Loop
    through the array of blocks currently displayed\\r\\n        this._currentBlocksShowed.forEach(blockElement
    => {\\r\\n            // We verify that there is a speed adjustment according
    to the level\\r\\n            if (this.levelSpeedByDifficulty[this._currentDifficultyLevel]
    != null) {\\r\\n                // If so, we access the \\\"MoveBlock\\\" component
    and set the speed as defined in the respective array\\r\\n                blockElement.GetComponent($typeof(MoveBlock_1.default)).SetSpeed(this.levelSpeedByDifficulty[this._currentDifficultyLevel]);\\r\\n           
    }\\r\\n        });\\r\\n    }\\r\\n    // This method enables the movement of
    the blocks and additionally defines when the game is running\\r\\n    SetBlocksMovement(value)
    {\\r\\n        // Since this method is called when there is a collision with
    the player,\\r\\n        // it is also used to define the state of \\\"isGameRunning\\\"
    in the GameManagerRunner.\\r\\n        GameManagerRunner_1.default.Instance.isGameRunning
    = value;\\r\\n        // We traverse the array of currently displayed blocks
    and set whether they are moving or not\\r\\n        this._currentBlocksShowed.forEach(blockElement
    => {\\r\\n            blockElement.GetComponent($typeof(MoveBlock_1.default)).SetMoving(value);\\r\\n       
    });\\r\\n        // If at the end of the game there is a block to be deleted
    \\r\\n        // (the last one that is out of the array of those currently shown),
    this is also set\\r\\n        if (__UnityEngine__.Object.op_Inequality(this._blockToDelete,
    null)) {\\r\\n            this._blockToDelete.GetComponent($typeof(MoveBlock_1.default)).SetMoving(value);\\r\\n       
    }\\r\\n    }\\r\\n    // This method removes the last block\\r\\n    RemoveLastBlock()
    {\\r\\n        // The \\\"shift\\\" method removes and returns a reference to
    the last object in an array\\r\\n        // We save this reference in the internal
    variable of Block to delete\\r\\n        this._blockToDelete = this._currentBlocksShowed.shift();\\r\\n       
    // Then we call the internal method to remove the block passing that reference
    by parameter\\r\\n        this.RemoveFirstOrReturnToPool(this._blockToDelete);\\r\\n   
    }\\r\\n    // This method resets the level\\r\\n    ResetLevel() {\\r\\n       
    // We loop through the array of currently displayed blocks \\r\\n        // and
    call the internal method to remove or return them to their respective pools\\r\\n       
    this._currentBlocksShowed.forEach(blockElement => {\\r\\n            this.RemoveFirstOrReturnToPool(blockElement);\\r\\n       
    });\\r\\n        // Reset the internal value of the difficulty level and clean
    up the array of currently displayed blocks\\r\\n        this._currentDifficultyLevel
    = 0;\\r\\n        this._currentBlocksShowed = [];\\r\\n    }\\r\\n    // If it
    is the StartBlock, the GameObject is deactivated, if not it is returned to its
    respective pool\\r\\n    RemoveFirstOrReturnToPool(element) {\\r\\n        //
    We compare if the block is the initial one or one that belongs to a pool\\r\\n       
    if (__UnityEngine__.Object.op_Equality(element, this.startBlockPrefab)) {\\r\\n           
    // In case of being the initial block, the movement is deactivated\\r\\n           
    // and it's deactivated\\r\\n            element.GetComponent($typeof(MoveBlock_1.default)).SetMoving(false);\\r\\n           
    element.SetActive(false);\\r\\n        }\\r\\n        else {\\r\\n           
    // If it belongs to a pool, its internal return method is called\\r\\n           
    element.GetComponent($typeof(MoveBlock_1.default)).ReturnToPool();\\r\\n       
    }\\r\\n    }\\r\\n}\\r\\nexports.default = LevelGenerator;\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGV2ZWxHZW5lcmF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJMZXZlbEdlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBd0Q7QUFDeEQsaURBQXFEO0FBQ3JELDJEQUFvRDtBQUNwRCw2REFBc0Q7QUFDdEQsa0RBQTJDO0FBQzNDLGtEQUEyQztBQUUzQywrQ0FBK0M7QUFDL0MsTUFBcUIsY0FBZSxTQUFRLHFDQUFxQjtJQW1CN0QsMkRBQTJEO0lBQ3BELEtBQUs7UUFFUixvRkFBb0Y7UUFDcEYsa0RBQWtEO1FBQ2xELElBL0JDLHFDQUFxQixDQTZJc0UsV0FDN0YsQ0EvR0ssY0FBYyxDQUFDLFFBQVEsRUFBSSxJQUFJO1lBQUUsY0FBYyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7O1lBQy9ELHdCQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxnRUFBZ0U7SUFDaEUsTUFBTTtRQUVGLHNGQUFzRjtRQUN0RixrR0FBa0c7UUFDbEcsSUFBSSxPQUFPLEdBQUcsNEJBQWtCLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBWSxDQUFDO1FBQzlELElBQUcsT0FBTyxHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsRUFDMUU7WUFDSSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztTQUNsQztJQUNMLENBQUM7SUFFTSxlQUFlO1FBRWxCLG9DQUFvQztRQUNwQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsQ0FBQyxDQUFDO1FBRWpDLHFFQUFxRTtRQUNyRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDO1FBRS9CLGdHQUFnRztRQUNoRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxvQkFB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\",\"assetPath\":\"Assets/Runner/Script/Managers/LevelGenerator.ts\",\"manifest\":{\"properties\":[{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"blockPools\",\"type\":\"UnityEngine.GameObject[]\",\"isArray\":true,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"mscorlib\",\"name\":\"difficultyLevelsTimeLimits\",\"type\":\"System.Single[]\",\"isArray\":true,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"mscorlib\",\"name\":\"levelSpeedByDifficulty\",\"type\":\"System.Single[]\",\"isArray\":true,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"startBlockPrefab\",\"type\":\"UnityEngine.GameObject\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"startBlockSpawnPoint\",\"type\":\"UnityEngine.GameObject\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]}],\"name\":\"LevelGenerator\",\"description\":\"\",\"hasAnimatorMove\":false},\"isCompiled\":true}"
  typescriptHash: 88d5a97ce019940777eff69c9f868380
  onlyWriteTrigger: 0
